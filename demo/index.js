import React, { Component } from 'react';
import ReactDOM from 'react-dom';
// import { Con, Row, Col } from 'bee-layout';
// import Drawer from 'bee-drawer';
// import Clipboard from 'bee-clipboard';
import { Panel } from 'bee-panel';
import { Row, Col, Drawer, Clipboard } from '@tinper/next-ui';



var Demo1 = require("./demolist/Demo1");var Demo2 = require("./demolist/Demo2");var Demo3 = require("./demolist/Demo3");var Demo4 = require("./demolist/Demo4");var Demo5 = require("./demolist/Demo5");var Demo6 = require("./demolist/Demo6");var Demo7 = require("./demolist/Demo7");var DemoArray = [{"example":<Demo1 />,"title":" 多语言 Input 组件","code":"// /**\r\n//  *\r\n//  * @title 多语言 Input 组件\r\n//  * @description 多语言 Input 组件 简单应用 绿色代表 当前选中 包含预览状态和编辑状态切换.当前语种对应的字段内容为空时，显示默认语种内容。\r\n//  *\r\n//  */\r\n\r\nimport React, { Component } from 'react';\r\nimport AcInputLocale from 'ac-input-locale/index.js';\r\nimport { Button } from '@tinper/next-ui';\r\n\r\n class Demo1 extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            sysLocale:\"en_US\",  //默认语种\r\n            locale:\"en_US\",     //当前语种\r\n            status:\"preview\",\r\n            localeListAll: {\r\n              \"zh_CN\":{\r\n                  \"zh_CN\":{\"label\":\"简体中文\",\"value\":\"\"},\r\n                  \"en_US\":{\"label\":\"英文\",\"value\":\"\"},\r\n                  \"zh_TW\":{\"label\":\"繁体中文\",\"value\":\"\"},\r\n                  \"fr_FR\":{\"label\":\"法语\",\"value\":\"\"}\r\n              },\r\n              \"en_US\":{\r\n                  \"zh_CN\":{\"label\":\"Simplified Chinese\",\"value\":\"\"},\r\n                  \"en_US\":{\"label\":\"English\",\"value\":\"\"},\r\n                  \"zh_TW\":{\"label\":\"traditional Chinese\",\"value\":\"\"},\r\n                  \"fr_FR\":{\"label\":\"French\",\"value\":\"\"}\r\n              },\r\n              \"zh_TW\":{\r\n                  \"zh_CN\":{\"label\":\"簡體中文\",\"value\":\"\"},\r\n                  \"en_US\":{\"label\":\"英文\",\"value\":\"\"},\r\n                  \"zh_TW\":{\"label\":\"繁體中文\",\"value\":\"\"},\r\n                  \"fr_FR\":{\"label\":\"法語\",\"value\":\"\"}\r\n              },\r\n              \"fr_FR\":{\r\n                  \"zh_CN\":{\"label\":\"Chinois simplifié\",\"value\":\"\"},\r\n                  \"en_US\":{\"label\":\"Anglais\",\"value\":\"\"},\r\n                  \"zh_TW\":{\"label\":\"Chinois traditionnel\",\"value\":\"\"},\r\n                  \"fr_FR\":{\"label\":\"Français\",\"value\":\"\"}\r\n              }\r\n\r\n          },\r\n          localeList:{},\r\n          localeJson:{\r\n            \"zh_CN\":\"简体中文\",\r\n            \"en_US\":\"英文\",\r\n            \"zh_TW\":\"繁体中文\",\r\n            \"fr_FR\":\"法语\"\r\n          }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // this.setState({\r\n        //     locale: [\r\n        //         {\r\n        //             locale:\"zh_CN\",label:\"中文\",value:\"\"\r\n        //         },\r\n        //         {\r\n        //             locale:\"en_US\",label:\"英文\",value:\"\"\r\n        //         },\r\n        //         {\r\n        //             locale:\"zh_TW\",label:\"台湾\",value:\"\"\r\n        //         }\r\n        //     ]\r\n        // })\r\n\r\n        this.setState({\r\n          locale:\"zh_CN\",\r\n          localeList:{\r\n            \"zh_CN\":{\"label\":\"简体中文\",\"value\":\"\"},\r\n            \"en_US\":{\"label\":\"英文\",\"value\":\"\"},\r\n            \"zh_TW\":{\"label\":\"繁体中文\",\"value\":\"\"},\r\n            \"fr_FR\":{\"label\":\"法语\",\"value\":\"\"}\r\n          }\r\n        })\r\n    }\r\n\r\n    onOk=(localeList)=>{\r\n      // this.setState({\r\n      //   localeList\r\n      // })\r\n      console.log(localeList)\r\n    }\r\n\r\n    onClick = (key)=>{\r\n        this.setState({\r\n          locale:key,\r\n          localeList:this.state.localeListAll[key]\r\n        })\r\n    }\r\n    changeStatus=(key)=>{\r\n      this.setState({\r\n        status:key\r\n      })\r\n    }\r\n\r\n    onChange = (localeList,localeValue) => {\r\n      console.log(localeList)\r\n      console.log(localeValue)\r\n    }\r\n\r\n    render () {\r\n        let {localeList,sysLocale,locale,status,localeJson,required} = this.state;\r\n        console.log(localeList,sysLocale,locale,status,localeJson)\r\n        // let modalLocale = {\r\n        //   'fr_FR':{\r\n        //     'title':'Multilingual établir12',\r\n        //     'okName':'conservation12',\r\n        //     'cancelName':'supprimer12',\r\n        //     'localeFlag':'1fasf'\r\n        //   }\r\n        // }\r\n        return (\r\n            <div className=\"demoPadding\">\r\n                <div className=\"btn\">\r\n                  <Button onClick={()=>{this.onClick(\"zh_CN\")}} colors={locale=='zh_CN'?'success':null}>[简体中文]</Button>\r\n                  <Button onClick={()=>{this.onClick(\"en_US\")}} colors={locale=='en_US'?'success':null}>[英文]</Button>\r\n                  <Button onClick={()=>{this.onClick(\"zh_TW\")}} colors={locale=='zh_TW'?'success':null}>[繁体中文]</Button>\r\n                  <Button onClick={()=>{this.onClick(\"fr_FR\")}} colors={locale=='fr_FR'?'success':null}>[法语]</Button>\r\n                </div>\r\n                <div>\r\n                  <span style={{fontFize:18}}>\r\n                    系统语种：{localeJson[sysLocale]}\r\n                  </span>\r\n                  <br/>\r\n                  <span>\r\n                    <div className=\"btn\">\r\n                      <span style={{width: '100px',lineHeight: '45px'}}>\r\n                      当前状态</span>\r\n                      <Button onClick={()=>{this.changeStatus(\"preview\")}} colors={status=='preview'?'success':null}>[预览]</Button>\r\n                      <Button onClick={()=>{this.changeStatus(\"editor\")}} colors={status=='editor'?'success':null}>[编辑]</Button>\r\n                    </div>\r\n\r\n                  </span>\r\n                </div>\r\n                名称：<AcInputLocale localeList={localeList} sysLocale={sysLocale} onOk={this.onOk} locale={locale} status={status} onChange={this.onChange}  ></AcInputLocale>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Demo1;\r\n","desc":" 多语言 Input 组件 简单应用 绿色代表 当前选中 包含预览状态和编辑状态切换.当前语种对应的字段内容为空时，显示默认语种内容。"},{"example":<Demo2 />,"title":" 多语言 Input 组件","code":"// /**\r\n//  *\r\n//  * @title 多语言 Input 组件\r\n//  * @description 多语言 Input 组件 简单应用 绿色代表 当前选中 预览状态\r\n//  * 绿色代表 当前语种\r\n//  * 预览状态\r\n//  */\r\n\r\nimport React, { Component } from 'react';\r\nimport AcInputLocale from 'ac-input-locale/index.js';\r\nimport { Button } from '@tinper/next-ui';\r\n\r\n class Demo2 extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            sysLocale:\"en_US\",  //默认语种\r\n            locale:\"en_US\",     //当前语种\r\n            status:\"preview\",\r\n            localeList: {\r\n              \"zh_CN\":{label:\"简体中文\",value:\"苹果\"},\r\n              \"en_US\":{label:\"英文\",value:\"apple\"},\r\n              \"zh_TW\":{label:\"繁体中文\",value:\"蘋果\"},\r\n              \"fr_FR\":{label:\"法语\",value:\"frenchapple\"}\r\n            },\r\n            localeJson:{\r\n              \"zh_CN\":\"简体中文\",\r\n              \"en_US\":\"英文\",\r\n              \"zh_TW\":\"繁体中文\",\r\n              \"fr_FR\":\"法语\"\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // this.setState({\r\n        //     locale: [\r\n        //         {\r\n        //             locale:\"zh_CN\",label:\"中文\",value:\"\"\r\n        //         },\r\n        //         {\r\n        //             locale:\"en_US\",label:\"英文\",value:\"\"\r\n        //         },\r\n        //         {\r\n        //             locale:\"zh_TW\",label:\"台湾\",value:\"\"\r\n        //         }\r\n        //     ]\r\n        // })\r\n        // debugger\r\n        this.setState({\r\n          locale:\"zh_CN\"\r\n        })\r\n    }\r\n\r\n    onOk=(localeList)=>{\r\n      console.log(localeList)\r\n    }\r\n\r\n    onClick = (key)=>{\r\n        this.setState({\r\n          locale:key\r\n        })\r\n    }\r\n    changeStatus=(key)=>{\r\n      this.setState({\r\n        status:key\r\n      })\r\n    }\r\n\r\n    onChange = (localeList,localeValue) => {\r\n      console.log(localeList)\r\n      console.log(localeValue)\r\n    }\r\n\r\n    render () {\r\n        let {localeList,sysLocale,locale,status,localeJson} = this.state;\r\n        // let modalLocale = {\r\n        //   'fr_FR':{\r\n        //     'title':'Multilingual établir12',\r\n        //     'okName':'conservation12',\r\n        //     'cancelName':'supprimer12',\r\n        //     'localeFlag':'1fasf'\r\n        //   }\r\n        // }\r\n        return (\r\n            <div className=\"demoPadding\">\r\n                <div className=\"btn\">\r\n                  <Button onClick={()=>{this.onClick(\"zh_CN\")}} colors={locale=='zh_CN'?'success':null}>[简体中文]</Button>\r\n                  <Button onClick={()=>{this.onClick(\"en_US\")}} colors={locale=='en_US'?'success':null}>[英文]</Button>\r\n                  <Button onClick={()=>{this.onClick(\"zh_TW\")}} colors={locale=='zh_TW'?'success':null}>[繁体中文]</Button>\r\n                  <Button onClick={()=>{this.onClick(\"fr_FR\")}} colors={locale=='fr_FR'?'success':null}>[法语]</Button>\r\n                </div>\r\n                <div>\r\n                  <span style={{fontFize:18}}>\r\n                    系统语种：{localeJson[sysLocale]}\r\n                    当前语种：{locale}\r\n                  </span>\r\n                  <br/>\r\n                </div>\r\n                名称：<AcInputLocale localeList={localeList} sysLocale={sysLocale} onOk={this.onOk} locale={locale} status={status} onChange={this.onChange}></AcInputLocale>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Demo2;\r\n","desc":" 多语言 Input 组件 简单应用 绿色代表 当前选中 预览状态"},{"example":<Demo3 />,"title":" 多语言 Input 组件","code":"// /**\r\n//  *\r\n//  * @title 多语言 Input 组件\r\n//  * @description 多语言 Input 组件 简单应用 绿色代表 当前选中 编辑状态\r\n//  * 绿色代表 当前语种\r\n//  * 编辑状态\r\n//  */\r\n\r\nimport React, { Component } from 'react';\r\nimport AcInputLocale from 'ac-input-locale/index.js';\r\nimport { Button } from '@tinper/next-ui';\r\n\r\n class Demo3 extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            sysLocale:\"en_US\",  //默认语种\r\n            locale:\"en_US\",     //当前语种\r\n            status:\"editor\",\r\n            localeList: {\r\n              \"zh_CN\":{label:\"简体中文\",value:\"苹果\"},\r\n              \"en_US\":{label:\"英文\",value:\"apple\"},\r\n              \"zh_TW\":{label:\"繁体中文\",value:\"蘋果\"},\r\n              \"fr_FR\":{label:\"法语\",value:\"frenchapple\"}\r\n            },\r\n            localeJson:{\r\n              \"zh_CN\":\"简体中文\",\r\n              \"en_US\":\"英文\",\r\n              \"zh_TW\":\"繁体中文\",\r\n              \"fr_FR\":\"法语\"\r\n            },\r\n            backdrop: false\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        setTimeout(() => {\r\n          this.setState({\r\n            locale:\"zh_CN\"\r\n          })\r\n        }, 100)\r\n    }\r\n\r\n    onOk=(localeList)=>{\r\n      // this.setState({\r\n      //   localeList\r\n      // })\r\n      console.log(localeList)\r\n    }\r\n\r\n    onClick = (key)=>{\r\n        this.setState({\r\n          locale:key\r\n        })\r\n    }\r\n    changeStatus=(key)=>{\r\n      this.setState({\r\n        status:key\r\n      })\r\n    }\r\n\r\n    onChange = (localeList,localeValue) => {\r\n      console.log(localeList)\r\n      console.log(localeValue)\r\n    }\r\n\r\n   onBlur = (e, v) => {\r\n     console.log(e)\r\n     console.log(v)\r\n     console.log('onBlur')\r\n   }\r\n\r\n    render () {\r\n        let {localeList,sysLocale,locale,status,localeJson,backdrop} = this.state;\r\n        // let modalLocale = {\r\n        //   'fr_FR':{\r\n        //     'title':'Multilingual établir12',\r\n        //     'okName':'conservation12',\r\n        //     'cancelName':'supprimer12',\r\n        //     'localeFlag':'1fasf'\r\n        //   }\r\n        // }\r\n        return (\r\n            <div className=\"demoPadding\">\r\n                <div className=\"btn\">\r\n                  <Button onClick={()=>{this.onClick(\"zh_CN\")}} colors={locale=='zh_CN'?'success':null}>[简体中文]</Button>\r\n                  <Button onClick={()=>{this.onClick(\"en_US\")}} colors={locale=='en_US'?'success':null}>[英文]</Button>\r\n                  <Button onClick={()=>{this.onClick(\"zh_TW\")}} colors={locale=='zh_TW'?'success':null}>[繁体中文]</Button>\r\n                  <Button onClick={()=>{this.onClick(\"fr_FR\")}} colors={locale=='fr_FR'?'success':null}>[法语]</Button>\r\n                </div>\r\n                <div>\r\n                  <span style={{fontFize:18}}>\r\n                    系统语种：{localeJson[sysLocale]}\r\n                  </span>\r\n\r\n                  <br/>\r\n                  当前语种：{locale}\r\n                </div>\r\n                名称：<AcInputLocale localeList={localeList} sysLocale={sysLocale} onOk={this.onOk} locale={locale} status={status} backdrop={backdrop} onChange={this.onChange} onBlur={this.onBlur}></AcInputLocale>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Demo3;\r\n","desc":" 多语言 Input 组件 简单应用 绿色代表 当前选中 编辑状态"},{"example":<Demo4 />,"title":" 多语言 Input 组件","code":"// /**\r\n//  *\r\n//  * @title 多语言 Input 组件\r\n//  * @description 多语言 Input 组件 简单应用 绿色代表 当前选中 改变默认模态框中文字说明\r\n//  * 绿色代表 当前语种\r\n//  * 编辑状态 改变默认模态框中文字说明\r\n//  */\r\n\r\nimport React, { Component } from 'react';\r\nimport AcInputLocale from 'ac-input-locale/index.js';\r\nimport { Button } from '@tinper/next-ui';\r\n\r\n class Demo4 extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            sysLocale:\"en_US\",  //默认语种\r\n            locale:\"en_US\",     //当前语种\r\n            status:\"editor\",\r\n            localeList: {\r\n              \"zh_CN\":{label:\"简体中文\",value:\"苹果\"},\r\n              \"en_US\":{label:\"英文\",value:\"apple\"},\r\n              \"zh_TW\":{label:\"繁体中文\",value:\"蘋果\"},\r\n              \"fr_FR\":{label:\"法语\",value:\"frenchapple\"}\r\n            },\r\n            localeJson:{\r\n              \"zh_CN\":\"简体中文\",\r\n              \"en_US\":\"英文\",\r\n              \"zh_TW\":\"繁体中文\",\r\n              \"fr_FR\":\"法语\"\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // this.setState({\r\n        //     locale: [\r\n        //         {\r\n        //             locale:\"zh_CN\",label:\"中文\",value:\"\"\r\n        //         },\r\n        //         {\r\n        //             locale:\"en_US\",label:\"英文\",value:\"\"\r\n        //         },\r\n        //         {\r\n        //             locale:\"zh_TW\",label:\"台湾\",value:\"\"\r\n        //         }\r\n        //     ]\r\n        // })\r\n    }\r\n\r\n    onOk=(localeList)=>{\r\n      // this.setState({\r\n      //   localeList\r\n      // })\r\n      console.log(localeList)\r\n    }\r\n\r\n    onClick = (key)=>{\r\n        this.setState({\r\n          locale:key\r\n        })\r\n    }\r\n    changeStatus=(key)=>{\r\n      this.setState({\r\n        status:key\r\n      })\r\n    }\r\n\r\n    onChange = (localeList,localeValue) => {\r\n      console.log(localeList)\r\n      console.log(localeValue)\r\n    }\r\n\r\n    render () {\r\n        let {localeList,sysLocale,locale,status,localeJson} = this.state;\r\n        let modalLocale = {\r\n          'fr_FR':{\r\n            'title':'Multilingual établir12',\r\n            'okName':'conservation12',\r\n            'cancelName':'supprimer12',\r\n            'localeFlag':'1fasf'\r\n          }\r\n        }\r\n        return (\r\n            <div className=\"demoPadding\">\r\n                <div className=\"btn\">\r\n                  <Button onClick={()=>{this.onClick(\"zh_CN\")}} colors={locale=='zh_CN'?'success':null}>[简体中文]</Button>\r\n                  <Button onClick={()=>{this.onClick(\"en_US\")}} colors={locale=='en_US'?'success':null}>[英文]</Button>\r\n                  <Button onClick={()=>{this.onClick(\"zh_TW\")}} colors={locale=='zh_TW'?'success':null}>[繁体中文]</Button>\r\n                  <Button onClick={()=>{this.onClick(\"fr_FR\")}} colors={locale=='fr_FR'?'success':null}>[法语]</Button>\r\n                </div>\r\n                <div>\r\n                  <span style={{fontFize:18}}>\r\n                    系统语种：{localeJson[sysLocale]}\r\n                  </span>\r\n                  <br/>\r\n                </div>\r\n                名称：<AcInputLocale localeList={localeList} sysLocale={sysLocale} onOk={this.onOk} locale={locale} status={status} onChange={this.onChange} modalLocale={modalLocale}></AcInputLocale>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Demo4;\r\n","desc":" 多语言 Input 组件 简单应用 绿色代表 当前选中 改变默认模态框中文字说明"},{"example":<Demo5 />,"title":" 多语言 Input 组件","code":"// /**\r\n//  *\r\n//  * @title 多语言 Input 组件\r\n//  * @description 多语言 Input 组件 简单应用 绿色代表 当前选中 预览状态\r\n//  * 绿色代表 当前语种\r\n//  * 预览状态\r\n//  */\r\n\r\nimport React, { Component } from 'react';\r\nimport AcInputLocale from 'ac-input-locale/index.js';\r\nimport { Button, Form } from '@tinper/next-ui';\r\n class Demo5 extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            sysLocale:\"en_US\",  //默认语种\r\n            locale:\"zh_CN\",     //当前语种\r\n            status:\"\",\r\n            required:true,\r\n            localeListAll: {\r\n              \"zh_CN\":{\r\n                  \"zh_CN\":{\"label\":\"简体中文\",\"value\":\"\" },\r\n                  \"en_US\":{\"label\":\"英文\",\"value\":\"\" },\r\n                  \"zh_TW\":{\"label\":\"繁体中文\",\"value\":\"\"},\r\n                  \"fr_FR\":{\"label\":\"法语\",\"value\":\"\" }\r\n              },\r\n              \"en_US\":{\r\n                  \"zh_CN\":{\"label\":\"Simplified Chinese\",\"value\":\"\" },\r\n                  \"en_US\":{\"label\":\"English\",\"value\":\"\" },\r\n                  \"zh_TW\":{\"label\":\"traditional Chinese\",\"value\":\"\" },\r\n                  \"fr_FR\":{\"label\":\"French\",\"value\":\"\" }\r\n              },\r\n              \"zh_TW\":{\r\n                  \"zh_CN\":{\"label\":\"簡體中文\",\"value\":\"\"},\r\n                  \"en_US\":{\"label\":\"英文\",\"value\":\"\" },\r\n                  \"zh_TW\":{\"label\":\"繁體中文\",\"value\":\"\" },\r\n                  \"fr_FR\":{\"label\":\"法語\",\"value\":\"\",}\r\n              },\r\n              \"fr_FR\":{\r\n                  \"zh_CN\":{\"label\":\"Chinois simplifié\",\"value\":\"\" },\r\n                  \"en_US\":{\"label\":\"Anglais\",\"value\":\"\" },\r\n                  \"zh_TW\":{\"label\":\"Chinois traditionnel\",\"value\":\"\" },\r\n                  \"fr_FR\":{\"label\":\"Français\",\"value\":\"\" }\r\n              }\r\n              \r\n          },\r\n            localeList: {},\r\n            localeJson:{\r\n              \"zh_CN\":\"简体中文\",\r\n              \"en_US\":\"英文\",\r\n              \"zh_TW\":\"繁体中文\",\r\n              \"fr_FR\":\"法语\"\r\n            }\r\n        }\r\n        this.save = this.save.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.setState({\r\n        localeList:{\r\n          \"zh_CN\":{\"label\":\"简体中文\",\"value\":\"椰子\",props:{maxLength: 10,onBlur: (e,v) => {console.log(e,v)}},rules:[{pattern: /^[\\u4e00-\\u9fa5]+$/, message: '简体中文格式错误'}, {required: true, message: '请输入内容'}],validateTrigger:'onChange' },\r\n          \"en_US\":{\"label\":\"英文\",\"value\":\"\",props:{maxLength: 10, onBlur: (e,v) => {console.log(e,v)}},rules:[{pattern: /^[a-zA-Z0-9]+$/, message: '英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误'}] },\r\n          \"zh_TW\":{\"label\":\"繁体中文\",\"value\":\"\",props:{maxLength: 10,onBlur: (e,v) => {console.log(e,v)}, fieldid: 'ac-input-tw'},rules:[{pattern: /^[\\u4e00-\\u9fa5]+$/, message: '繁体中文格式错误繁体中文格式错误繁体中文格式错误繁体中文格式错误繁体中文格式错误繁体中文格式错误'}],validateTrigger:'onChange'},\r\n        }\r\n        //   {\r\n        //     \"zh_CN\":{\"label\":\"简体中文\",\"value\":\"\",\"errorMsg\":\"不能为空\"},\r\n        //     \"en_US\":{\"label\":\"英文\",\"value\":\"\",\"errorMsg\":\"不能为空\"},\r\n        //     \"zh_TW\":{\"label\":\"繁体中文\",\"value\":\"\",\"errorMsg\":\"不能为空\"},\r\n        //     \"fr_FR\":{\"label\":\"法语\",\"value\":\"\",\"errorMsg\":\"不能为空\"}\r\n        // }\r\n        \r\n      }\r\n      );\r\n        // this.setState({\r\n        //     locale: [\r\n        //         {\r\n        //             locale:\"zh_CN\",label:\"中文\",value:\"\"\r\n        //         },\r\n        //         {\r\n        //             locale:\"en_US\",label:\"英文\",value:\"\"\r\n        //         },\r\n        //         {\r\n        //             locale:\"zh_TW\",label:\"台湾\",value:\"\"\r\n        //         }\r\n        //     ]\r\n        // })\r\n      const rules = {pattern: /^[a-zA-Z0-9]+$/, message: '用户名格式错误'};\r\n      console.log(rules)\r\n    }\r\n\r\n    onOk=(localeList)=>{\r\n      console.log('oK',localeList)\r\n    }\r\n\r\n    onClick = (key)=>{\r\n        this.setState({\r\n          locale:key,\r\n          localeList:this.state.localeListAll[key]\r\n        })\r\n    }\r\n    changeStatus=(key)=>{\r\n      this.setState({\r\n        status:key\r\n      })\r\n    }\r\n\r\n    onChange = (localeList,localeValue) => {\r\n      console.log(localeList)\r\n      console.log(localeValue)\r\n    }\r\n\r\n    blur = (e,v) => {\r\n      console.log(e)\r\n      console.log(v)\r\n      console.log('blur')\r\n    }\r\n\r\n   focus = (e) => {\r\n     console.log(e)\r\n     console.log('focus')\r\n   }\r\n\r\n   onPressEnter = e => {\r\n     console.log(e)\r\n     console.log('onPressEnter')\r\n   }\r\n\r\n   onKeyDown = e => {\r\n     console.log(e)\r\n     console.log('onKeyDown')\r\n   }\r\n\r\n   onCancel = () => {\r\n     console.log('onCancel')\r\n   }\r\n\r\n    save(e) {\r\n      e.preventDefault();\r\n      this.props.form.validateFields((err, values) => {\r\n          if (err) {\r\n              console.log('校验失败', values);\r\n          } else {\r\n              console.log('提交成功', values)\r\n\r\n          }\r\n      });\r\n    }\r\n\r\n    render () {\r\n        let {localeList,sysLocale,locale,status,localeJson,required} = this.state;\r\n        // let modalLocale = {\r\n        //   'fr_FR':{\r\n        //     'title':'Multilingual établir12',\r\n        //     'okName':'conservation12',\r\n        //     'cancelName':'supprimer12',\r\n        //     'localeFlag':'1fasf'\r\n        //   }\r\n        // }\r\n        return (\r\n            <div className=\"demoPadding demo5\">\r\n                <div className=\"btn\">\r\n                  <Button onClick={()=>{this.onClick(\"zh_CN\")}} colors={locale=='zh_CN'?'success':null}>[简体中文]</Button>\r\n                  <Button onClick={()=>{this.onClick(\"en_US\")}} colors={locale=='en_US'?'success':null}>[英文]</Button>\r\n                  <Button onClick={()=>{this.onClick(\"zh_TW\")}} colors={locale=='zh_TW'?'success':null}>[繁体中文]</Button>\r\n                  <Button onClick={()=>{this.onClick(\"fr_FR\")}} colors={locale=='fr_FR'?'success':null}>[法语]</Button>\r\n                </div>\r\n                <div>\r\n                  <span style={{fontFize:18}}>\r\n                    系统语种：{localeJson[sysLocale]}\r\n                  </span>\r\n                  <br/>\r\n                </div>\r\n                名称：\r\n                <AcInputLocale\r\n                  inputId={'username'}\r\n                  form={this.props.form}\r\n                  localeList={localeList}\r\n                  sysLocale={sysLocale}\r\n                  onOk={this.onOk}\r\n                  locale={locale}\r\n                  status={status}\r\n                  onChange={this.onChange}\r\n                  required={required}\r\n                  onBlur={this.blur}\r\n                  onFocus={this.focus}\r\n                  onPressEnter={this.onPressEnter}\r\n                  onKeyDown={this.onKeyDown}\r\n                  onCancel={this.onCancel}\r\n                  fieldid = {'ac-input'}\r\n                  modalProps={\r\n                      {\r\n                          getPopupContainer: () => { return document.querySelector('.demo5')},\r\n                          fieldid: 'modal_fieldid'\r\n                      }\r\n                  }\r\n                >\r\n                </AcInputLocale>\r\n                <Button onClick={this.save}>保存</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form.createForm()(Demo5)\r\n","desc":" 多语言 Input 组件 简单应用 绿色代表 当前选中 预览状态"},{"example":<Demo6 />,"title":" 多语言 Input 组件 录入时是popconfirm 形","code":"/**\r\n *\r\n * @title 多语言 Input 组件 录入时是popconfirm 形式\r\n * @description 多语言 Input 组件 简单应用 绿色代表 当前选中 预览状态\r\n * 绿色代表 当前语种\r\n * 预览状态\r\n */\r\nimport React, { Component } from 'react';\r\nimport AcInputLocale from 'ac-input-locale/index.js';\r\nimport { Button, Form } from '@tinper/next-ui';\r\nclass Demo6 extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            sysLocale:\"en_US\",  //默认语种\r\n            locale:\"zh_CN\",     //当前语种\r\n            status:\"\",\r\n            required:true,\r\n            localeListAll: {\r\n              \"zh_CN\":{\r\n                  \"zh_CN\":{\"label\":\"简体中文\",\"value\":\"\" },\r\n                  \"en_US\":{\"label\":\"英文\",\"value\":\"\" },\r\n                  \"zh_TW\":{\"label\":\"繁体中文\",\"value\":\"\"},\r\n                  \"fr_FR\":{\"label\":\"法语\",\"value\":\"\" }\r\n              },\r\n              \"en_US\":{\r\n                  \"zh_CN\":{\"label\":\"Simplified Chinese\",\"value\":\"\" },\r\n                  \"en_US\":{\"label\":\"English\",\"value\":\"\" },\r\n                  \"zh_TW\":{\"label\":\"traditional Chinese\",\"value\":\"\" },\r\n                  \"fr_FR\":{\"label\":\"French\",\"value\":\"\" }\r\n              },\r\n              \"zh_TW\":{\r\n                  \"zh_CN\":{\"label\":\"簡體中文\",\"value\":\"\"},\r\n                  \"en_US\":{\"label\":\"英文\",\"value\":\"\" },\r\n                  \"zh_TW\":{\"label\":\"繁體中文\",\"value\":\"\" },\r\n                  \"fr_FR\":{\"label\":\"法語\",\"value\":\"\",}\r\n              },\r\n              \"fr_FR\":{\r\n                  \"zh_CN\":{\"label\":\"Chinois simplifié\",\"value\":\"\" },\r\n                  \"en_US\":{\"label\":\"Anglais\",\"value\":\"\" },\r\n                  \"zh_TW\":{\"label\":\"Chinois traditionnel\",\"value\":\"\" },\r\n                  \"fr_FR\":{\"label\":\"Français\",\"value\":\"\" }\r\n              }\r\n\r\n          },\r\n            localeList: {},\r\n            localeJson:{\r\n              \"zh_CN\":\"简体中文\",\r\n              \"en_US\":\"英文\",\r\n              \"zh_TW\":\"繁体中文\",\r\n              \"fr_FR\":\"法语\"\r\n            }\r\n        }\r\n        this.save = this.save.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.setState({\r\n        localeList:{\r\n          \"zh_CN\":{\"label\":\"简体中文\",\"value\":\"\" },\r\n          \"en_US\":{\"label\":\"英文\",\"value\":\"\" },\r\n          \"zh_TW\":{\"label\":\"繁体中文\",\"value\":\"\"},\r\n        }\r\n        //   {\r\n        //     \"zh_CN\":{\"label\":\"简体中文\",\"value\":\"\",\"errorMsg\":\"不能为空\"},\r\n        //     \"en_US\":{\"label\":\"英文\",\"value\":\"\",\"errorMsg\":\"不能为空\"},\r\n        //     \"zh_TW\":{\"label\":\"繁体中文\",\"value\":\"\",\"errorMsg\":\"不能为空\"},\r\n        //     \"fr_FR\":{\"label\":\"法语\",\"value\":\"\",\"errorMsg\":\"不能为空\"}\r\n        // }\r\n\r\n      }\r\n      );\r\n        // this.setState({\r\n        //     locale: [\r\n        //         {\r\n        //             locale:\"zh_CN\",label:\"中文\",value:\"\"\r\n        //         },\r\n        //         {\r\n        //             locale:\"en_US\",label:\"英文\",value:\"\"\r\n        //         },\r\n        //         {\r\n        //             locale:\"zh_TW\",label:\"台湾\",value:\"\"\r\n        //         }\r\n        //     ]\r\n        // })\r\n    }\r\n\r\n\r\n    onOk=(localeList)=>{\r\n      console.log(localeList)\r\n    }\r\n\r\n    onClick = (key)=>{\r\n        this.setState({\r\n          locale:key,\r\n          localeList:this.state.localeListAll[key]\r\n        })\r\n    }\r\n    changeStatus=(key)=>{\r\n      this.setState({\r\n        status:key\r\n      })\r\n    }\r\n\r\n    onChange = (localeList,localeValue) => {\r\n      console.log(localeList)\r\n      console.log(localeValue)\r\n    }\r\n\r\n    save(e) {\r\n      e.preventDefault();\r\n      this.props.form.validateFields((err, values) => {\r\n          if (err) {\r\n              console.log('校验失败', values);\r\n          } else {\r\n              console.log('提交成功', values)\r\n          }\r\n      });\r\n    }\r\n\r\n    render () {\r\n        let {localeList, sysLocale, locale, status, localeJson, required} = this.state;\r\n        // let modalLocale = {\r\n        //   'fr_FR':{\r\n        //     'title':'Multilingual établir12',\r\n        //     'okName':'conservation12',\r\n        //     'cancelName':'supprimer12',\r\n        //     'localeFlag':'1fasf'\r\n        //   }\r\n        // }\r\n        return (\r\n            <div className=\"demoPadding\">\r\n                <div className=\"btn\">\r\n                  <Button onClick={()=>{this.onClick(\"zh_CN\")}} colors={locale=='zh_CN'?'success':null}>[简体中文]</Button>\r\n                  <Button onClick={()=>{this.onClick(\"en_US\")}} colors={locale=='en_US'?'success':null}>[英文]</Button>\r\n                  <Button onClick={()=>{this.onClick(\"zh_TW\")}} colors={locale=='zh_TW'?'success':null}>[繁体中文]</Button>\r\n                  <Button onClick={()=>{this.onClick(\"fr_FR\")}} colors={locale=='fr_FR'?'success':null}>[法语]</Button>\r\n                </div>\r\n                <div>\r\n                  <span style={{fontFize:18}}>\r\n                    系统语种：{localeJson[sysLocale]}\r\n                  </span>\r\n                  <br/>\r\n                  <span style={{fontFize:18}}>\r\n                    当前语种：{localeJson[locale]}\r\n                  </span>\r\n                  <br/>\r\n                </div>\r\n                名称：\r\n                <AcInputLocale\r\n                  inputId={'username'}\r\n                  form={this.props.form}\r\n                  localeList={localeList}\r\n                  sysLocale={sysLocale}\r\n                  onOk={this.onOk}\r\n                  locale={locale}\r\n                  status={status}\r\n                  onChange={this.onChange}\r\n                  required={required}\r\n                  isPopConfirm={true}\r\n                  isShowNoneLeftLable={true}\r\n                  fieldid={'pop'}\r\n                  popConfirmProps={\r\n                    {\r\n                        fieldid: 'pop_fieldid'\r\n                    }\r\n                }\r\n                >\r\n                </AcInputLocale>\r\n                <Button onClick={this.save}>保存</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form.createForm()(Demo6)\r\n","desc":" 多语言 Input 组件 简单应用 绿色代表 当前选中 预览状态"},{"example":<Demo7 />,"title":" 多语言 Input 组件","code":"// /**\r\n//  *\r\n//  * @title 多语言 Input 组件\r\n//  * @description 多语言 Input 组件 简单应用 绿色代表 当前选中 预览状态\r\n//  * 绿色代表 当前语种\r\n//  * 预览状态\r\n//  */\r\n\r\nimport React, { Component } from 'react';\r\nimport AcInputLocale from 'ac-input-locale/index.js';\r\nimport { Button, Form } from '@tinper/next-ui';\r\n class Demo7 extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            sysLocale:\"en_US\",  //默认语种\r\n            locale:\"zh_CN\",     //当前语种\r\n            status:\"\",\r\n            required:true,\r\n            localeListAll: {\r\n              \"zh_CN\":{\r\n                  \"zh_CN\":{\"label\":\"简体中文\",\"value\":\"\" },\r\n                  \"en_US\":{\"label\":\"英文\",\"value\":\"\" },\r\n                  \"zh_TW\":{\"label\":\"繁体中文\",\"value\":\"\"},\r\n                  \"fr_FR\":{\"label\":\"法语\",\"value\":\"\" }\r\n              },\r\n              \"en_US\":{\r\n                  \"zh_CN\":{\"label\":\"Simplified Chinese\",\"value\":\"\" },\r\n                  \"en_US\":{\"label\":\"English\",\"value\":\"\" },\r\n                  \"zh_TW\":{\"label\":\"traditional Chinese\",\"value\":\"\" },\r\n                  \"fr_FR\":{\"label\":\"French\",\"value\":\"\" }\r\n              },\r\n              \"zh_TW\":{\r\n                  \"zh_CN\":{\"label\":\"簡體中文\",\"value\":\"\"},\r\n                  \"en_US\":{\"label\":\"英文\",\"value\":\"\" },\r\n                  \"zh_TW\":{\"label\":\"繁體中文\",\"value\":\"\" },\r\n                  \"fr_FR\":{\"label\":\"法語\",\"value\":\"\",}\r\n              },\r\n              \"fr_FR\":{\r\n                  \"zh_CN\":{\"label\":\"Chinois simplifié\",\"value\":\"\" },\r\n                  \"en_US\":{\"label\":\"Anglais\",\"value\":\"\" },\r\n                  \"zh_TW\":{\"label\":\"Chinois traditionnel\",\"value\":\"\" },\r\n                  \"fr_FR\":{\"label\":\"Français\",\"value\":\"\" }\r\n              }\r\n              \r\n          },\r\n            localeList: {},\r\n            localeJson:{\r\n              \"zh_CN\":\"简体中文\",\r\n              \"en_US\":\"英文\",\r\n              \"zh_TW\":\"繁体中文\",\r\n              \"fr_FR\":\"法语\"\r\n            }\r\n        }\r\n        this.save = this.save.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.setState({\r\n        localeList:{\r\n          \"zh_CN\":{\"label\":\"简体中文\",\"value\":\"椰子\",props:{maxLength: 10,onBlur: (e,v) => {console.log(e,v)}},rules:[{pattern: /^[\\u4e00-\\u9fa5]+$/, message: '简体中文格式错误'}, {required: true, message: '请输入内容'}],validateTrigger:'onChange' },\r\n          \"en_US\":{\"label\":\"英文\",\"value\":\"\",props:{maxLength: 10, onBlur: (e,v) => {console.log(e,v)}},rules:[{pattern: /^[a-zA-Z0-9]+$/, message: '英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误英文格式错误'}] },\r\n          \"zh_TW\":{\"label\":\"繁体中文\",\"value\":\"\",props:{maxLength: 10,onBlur: (e,v) => {console.log(e,v)}, fieldid: 'ac-input-tw'},rules:[{pattern: /^[\\u4e00-\\u9fa5]+$/, message: '繁体中文格式错误繁体中文格式错误繁体中文格式错误繁体中文格式错误繁体中文格式错误繁体中文格式错误'}],validateTrigger:'onChange'},\r\n        }\r\n        //   {\r\n        //     \"zh_CN\":{\"label\":\"简体中文\",\"value\":\"\",\"errorMsg\":\"不能为空\"},\r\n        //     \"en_US\":{\"label\":\"英文\",\"value\":\"\",\"errorMsg\":\"不能为空\"},\r\n        //     \"zh_TW\":{\"label\":\"繁体中文\",\"value\":\"\",\"errorMsg\":\"不能为空\"},\r\n        //     \"fr_FR\":{\"label\":\"法语\",\"value\":\"\",\"errorMsg\":\"不能为空\"}\r\n        // }\r\n        \r\n      }\r\n      );\r\n        // this.setState({\r\n        //     locale: [\r\n        //         {\r\n        //             locale:\"zh_CN\",label:\"中文\",value:\"\"\r\n        //         },\r\n        //         {\r\n        //             locale:\"en_US\",label:\"英文\",value:\"\"\r\n        //         },\r\n        //         {\r\n        //             locale:\"zh_TW\",label:\"台湾\",value:\"\"\r\n        //         }\r\n        //     ]\r\n        // })\r\n      const rules = {pattern: /^[a-zA-Z0-9]+$/, message: '用户名格式错误'};\r\n      console.log(rules)\r\n    }\r\n\r\n    onOk=(localeList)=>{\r\n      console.log('oK',localeList)\r\n    }\r\n\r\n    onClick = (key)=>{\r\n        this.setState({\r\n          locale:key,\r\n          localeList:this.state.localeListAll[key]\r\n        })\r\n    }\r\n    changeStatus=(key)=>{\r\n      this.setState({\r\n        status:key\r\n      })\r\n    }\r\n\r\n    onChange = (localeList,localeValue) => {\r\n      console.log(localeList)\r\n      console.log(localeValue)\r\n    }\r\n\r\n    blur = (e,v) => {\r\n      console.log(e)\r\n      console.log(v)\r\n      console.log('blur')\r\n    }\r\n\r\n   focus = (e) => {\r\n     console.log(e)\r\n     console.log('focus')\r\n   }\r\n\r\n   onPressEnter = e => {\r\n     console.log(e)\r\n     console.log('onPressEnter')\r\n   }\r\n\r\n   onKeyDown = e => {\r\n     console.log(e)\r\n     console.log('onKeyDown')\r\n   }\r\n\r\n   onCancel = () => {\r\n     console.log('onCancel')\r\n   }\r\n\r\n    save(e) {\r\n      e.preventDefault();\r\n      this.props.form.validateFields((err, values) => {\r\n          if (err) {\r\n              console.log('校验失败', values);\r\n          } else {\r\n              console.log('提交成功', values)\r\n\r\n          }\r\n      });\r\n    }\r\n\r\n    render () {\r\n        let {localeList,sysLocale,locale,status,localeJson,required} = this.state;\r\n        // let modalLocale = {\r\n        //   'fr_FR':{\r\n        //     'title':'Multilingual établir12',\r\n        //     'okName':'conservation12',\r\n        //     'cancelName':'supprimer12',\r\n        //     'localeFlag':'1fasf'\r\n        //   }\r\n        // }\r\n        return (\r\n            <div className=\"demoPadding demo5\">\r\n                <div className=\"btn\">\r\n                  <Button onClick={()=>{this.onClick(\"zh_CN\")}} colors={locale=='zh_CN'?'success':null}>[简体中文]</Button>\r\n                  <Button onClick={()=>{this.onClick(\"en_US\")}} colors={locale=='en_US'?'success':null}>[英文]</Button>\r\n                  <Button onClick={()=>{this.onClick(\"zh_TW\")}} colors={locale=='zh_TW'?'success':null}>[繁体中文]</Button>\r\n                  <Button onClick={()=>{this.onClick(\"fr_FR\")}} colors={locale=='fr_FR'?'success':null}>[法语]</Button>\r\n                </div>\r\n                <div>\r\n                  <span style={{fontFize:18}}>\r\n                    系统语种：{localeJson[sysLocale]}\r\n                  </span>\r\n                  <br/>\r\n                </div>\r\n                名称：\r\n                <AcInputLocale\r\n                  inputId={'username'}\r\n                  form={this.props.form}\r\n                  localeList={localeList}\r\n                  sysLocale={sysLocale}\r\n                  onOk={this.onOk}\r\n                  locale={locale}\r\n                  status={status}\r\n                  onChange={this.onChange}\r\n                  required={required}\r\n                  onBlur={this.blur}\r\n                  onFocus={this.focus}\r\n                  onPressEnter={this.onPressEnter}\r\n                  onKeyDown={this.onKeyDown}\r\n                  onCancel={this.onCancel}\r\n                  fieldid = {'ac-input'}\r\n                  isTextarea\r\n                  rows={4}\r\n                  modalProps={\r\n                      {\r\n                          getPopupContainer: () => { return document.querySelector('.demo5')},\r\n                          fieldid: 'modal_fieldid'\r\n                      }\r\n                  }\r\n                >\r\n                </AcInputLocale>\r\n                <Button onClick={this.save}>保存</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form.createForm()(Demo7)\r\n","desc":" 多语言 Input 组件 简单应用 绿色代表 当前选中 预览状态"}]


class Demo extends Component {
    constructor(props){
        super(props);
        this.state = {
            open: false
        }
    }
    handleClick=()=> {
        this.setState({ open: !this.state.open })
    }
    fCloseDrawer=()=>{
        this.setState({
            open: false
        })
    }

    render () {
        const { title, example, code, desc, scss_code  } = this.props;

        const header = (
            <div>
                <p className='component-title'>{ title }</p>
                <p>{ desc }</p>
                <span className='component-code' onClick={this.handleClick}> 查看源码 <i className='uf uf-arrow-right'/> </span>
            </div>
        );
        return (
            <Col md={24} id={title.trim()} className='component-demo'>
            <Panel header={header}>
                {example}
            </Panel>
           
            <Drawer className='component-drawerc' title={title} show={this.state.open} placement='right' onClose={this.fCloseDrawer}>
            <div className='component-code-copy'> JS代码 
                <Clipboard action="copy" text={code}/>
            </div>
            <pre className="pre-js">
                <code className="hljs javascript">{ code }</code>
            </pre >
            {!!scss_code ?<div className='component-code-copy copy-css'> SCSS代码 
                <Clipboard action="copy" text={scss_code}/>
            </div>:null }
                { !!scss_code ? <pre className="pre-css">
                 <code className="hljs css">{ scss_code }</code>
                 </pre> : null }
            </Drawer>
        </Col>
    )
    }
}

class DemoGroup extends Component {
    constructor(props){
        super(props)
    }
    render () {
        return (
            <Row>
            {DemoArray.map((child,index) => {

                return (
            <Demo example= {child.example} title= {child.title} code= {child.code} scss_code= {child.scss_code} desc= {child.desc} key= {index}/>
    )

    })}
    </Row>
    )
    }
}

ReactDOM.render(<DemoGroup/>, document.getElementById('tinperBeeDemo'));
